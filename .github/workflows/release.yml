name: Release and Publish NuGet Package

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version number (e.g., 1.0.0)"
        required: true

jobs:
  prepare-release:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.set-tag.outputs.tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set version in .csproj
        run: |
          VERSION=${{ github.event.inputs.version }}
          FILE=$(find . -name '*.csproj' | head -n 1)
          echo "Setting version to $VERSION in $FILE"
          if grep -q "<Version>" "$FILE"; then
            sed -i 's|<Version>.*</Version>|<Version>'$VERSION'</Version>|' "$FILE"
          else
            sed -i '/<PropertyGroup>/a <Version>'$VERSION'</Version>' "$FILE"
          fi

      - name: Commit version bump and tag
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git commit -am "Bump version to ${{ github.event.inputs.version }}"
          git tag v${{ github.event.inputs.version }}
          git push origin HEAD:main
          git push origin v${{ github.event.inputs.version }}

      - name: Output tag
        id: set-tag
        run: echo "tag=v${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT

  build-publish:
    needs: prepare-release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.x"

      - name: Restore
        run: dotnet restore OracleDbReader.sln

      - name: Build
        run: dotnet build OracleDbReader.sln --configuration Release --no-restore

      - name: Test
        run: dotnet test OracleDbReader.sln --configuration Release --no-build

      - name: Pack main project
        run: |
          PROJECT=$(find . -name 'OracleDbReader.csproj')
          dotnet pack "$PROJECT" --configuration Release --no-build --output ./nupkgs

      - name: Push to NuGet
        run: dotnet nuget push ./nupkgs/*.nupkg --source https://api.nuget.org/v3/index.json --api-key ${{ secrets.NUGET_API_KEY }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.prepare-release.outputs.tag }}
          files: ./nupkgs/*.nupkg
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
